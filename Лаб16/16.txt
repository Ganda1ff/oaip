#define N 10

#define M 15

int map[N][M] = {

{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},

{0,1,0,0,0, 0,0,0,0,3, 0,0,0,0,0},

{0,0,0,0,0, 0,0,0,0,3, 0,0,0,0,0},

{0,0,0,3,3, 3,3,0,0,0, 3,3,0,0,0},

{0,0,0,0,0, 0,3,0,0,0, 3,3,0,0,0},

{0,0,0,0,0, 0,3,3,3,0, 0,0,0,0,0},

{0,0,0,0,0, 0,0,0,3,0, 2,0,0,2,0},

{0,0,0,0,0, 0,0,2,0,0, 2,0,0,2,0},

{0,0,0,0,0, 0,2,2,2,2, 2,2,2,2,0},

{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0}

};

#define WIDTH 30

#define HEIGHT 20

void drawMap(HDC hdc) {

    HBRUSH hBrushEmptyCell = CreateSolidBrush(RGB(200, 200, 200));

    HBRUSH hBrushGold = CreateSolidBrush(RGB(255, 255, 0));

    HBRUSH hBrushWall = CreateSolidBrush(RGB(0, 0, 0));

    HBRUSH hBrushMan = CreateSolidBrush(RGB(0, 0, 255));

    HBRUSH brush[4] = { hBrushEmptyCell, hBrushMan, hBrushWall, hBrushGold };

    int i, j;

    

    for (i = 0; i < N; i++) {

        for (j = 0; j < M; j++) {

            int x1 = j * WIDTH;

            int x2 = (j + 1) * WIDTH;

            int y1 = i * HEIGHT;

            int y2 = (i + 1) * HEIGHT;

            RECT r = { x1,y1,x2,y2 };

            FillRect(hdc, &r, brush[map[i][j]]);

        }

    }

    for (i = 0; i < 4; i++) {

        DeleteObject(brush[i]);

    }

}


int steps = 0;

int gold = 0;

void Left() {

    int i, j;



    for (i = 0; i < N; i++) {

        for (j = 1; j < M; j++) {

            if (map[i][j] == 1) {

                if (map[i][j - 1] == 0) {

                    map[i][j - 1] = 1;

                    map[i][j] = 0;

                    steps++;

                }

                else if (map[i][j - 1] == 3) {

                    map[i][j - 1] = 1;

                    map[i][j] = 0;

                    steps++;

                    gold++;

                }

            }

        }

    }

}

void Right() {

    int i, j;

   

    for (i = 0; i < N; i++) {

        for (j = M - 2; j >= 0; j--) {

            if (map[i][j] == 1) {

                if (map[i][j + 1] == 0) {

                    map[i][j + 1] = 1;

                    map[i][j] = 0;

                    steps++;

                }

                else if (map[i][j + 1] == 3) {

                    map[i][j + 1] = 1;

                    map[i][j] = 0;

                    steps++;

                    gold++;

                }

            }

        }

    }

}

void Up() {

    int i, j;



    for (j = 0; j < M; j++) {

        for (i = 1; i < N; i++) {

            if (map[i][j] == 1) {

                if (map[i - 1][j] == 0) {

                    map[i - 1][j] = 1;

                    map[i][j] = 0;

                    steps++;

                }

                else if (map[i - 1][j] == 3) {

                    map[i - 1][j] = 1;

                    map[i][j] = 0;

                    steps++;

                    gold++;

                }

            }

        }

    }

}

void Down() {

    int i, j;

    

    for (i = N - 2; i >= 0; i--) {

        for (j = 0; j < M; j++) {

            if (map[i][j] == 1) {

                if (map[i + 1][j] == 0) {

                    map[i + 1][j] = 1;

                    map[i][j] = 0;

                    steps++;

                }

                else if (map[i + 1][j] == 3) {

                    map[i + 1][j] = 1;

                    map[i][j] = 0;

                    steps++;

                    gold++;

                }

            }

        }

    }

}

void save() {

    FILE* fout;
    errno_t err = fopen_s(&fout, "d:\\game\\game.txt", "wt");
    if (err !=0 || fout == NULL) {
        printf("file is not saved\n");
        return;

    }

    fprintf(fout, "%d ", N);
    fprintf(fout, "%d\n", M);

    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            fprintf(fout, "%d ", map[i][j]);
        }
        fprintf(fout, "\n");
    }
    fprintf(fout, "%d ", steps);
    fprintf(fout, "%d", gold);
    

    fclose(fout);

   
    
}

void load() {

    FILE* fin;
    errno_t err = fopen_s(&fin, "d:\\game\\game.txt", "rt");
    if (err !=0 || fin == NULL) {
        printf("file not found\n");
        return;

    }

    int n, m;
    fscanf_s(fin, "%d", &n);
    fscanf_s(fin, "%d", &m);

    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            fscanf_s(fin, "%d", &map[i][j]);
        }
        fscanf_s(fin, "\n");
    }
    fscanf_s(fin, "%d ", &steps);
    fscanf_s(fin, "%d", &gold);

    fclose(fin);

}

void add_wall_left() {

    int i, j;

    for (i = 0; i < N; i++) {
        for (j = 1; j < M; j++) {
            if (map[i][j] == 1) {
                if (map[i][j - 1] == 0) {
                    map[i][j - 1] = 2;
                }
                else if (map[i][j - 1] == 3) {
                    map[i][j - 1] = 2;
                }
            }
        }
    }
}


void add_gold_right() {

    int i, j;

    for (i = 0; i < N; i++) {
        for (j = M - 2; j >= 0; j--) {
            if (map[i][j] == 1) {
                if (map[i][j + 1] == 0) {
                    map[i][j + 1] = 3;
                }
                else if (map[i][j + 1] == 3) {
                    map[i][j + 1] = 3;
                }
            }
        }
    }
}

void remove_wall_up() {

    int i, j;

    for (i = 1; i < N; i++) {
        for (j = 0; j < M; j++) {
            if (map[i][j] == 1) {
                if (map[i - 1][j] == 2) {
                    map[i - 1][j] = 0;
                }

            }
        }
    }
}

void remove_wall_down() {

    int i, j;

    for (i = N - 2; i >= 0; i--) {
        for (j = 0; j < M; j++) {
            if (map[i][j] == 1) {
                if (map[i + 1][j] == 2) {
                    map[i + 1][j] = 0;
                }
               
            }
        }
    }
}


void remove_walls() {

    int i, j;

    int playerX = -1, playerY = -1;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            if (map[i][j] == 1) {
                playerX = i;
                playerY = j;
                break;
                }
            }

        }

    for (int j = playerY + 1; j < M; j++) {  
        if (map[playerX][j] == 2) {  
            map[playerX][j] = 0; 
        }
    }
}
// ФУНКЦИЯ: WndProc(HWND, UINT, WPARAM, LPARAM)

//

// ЦЕЛЬ: Обрабатывает сообщения в главном окне.

//

// WM_COMMAND - обработать меню приложения

// WM_PAINT - Отрисовка главного окна

// WM_DESTROY - отправить сообщение о выходе и вернуться

//

//

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)

{

    switch (message)

    {

    case WM_COMMAND:

    {

        int wmId = LOWORD(wParam);

        // Разобрать выбор в меню:

        switch (wmId)

        {

        case IDM_ABOUT:

            DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);

            break;

        case IDM_EXIT:

            DestroyWindow(hWnd);

            break;

        default:

            return DefWindowProc(hWnd, message, wParam, lParam);

        }

    }

    break;

    case WM_PAINT:

    {

        PAINTSTRUCT ps;

        HDC hdc = BeginPaint(hWnd, &ps);

        // TODO: Добавьте сюда любой код прорисовки, использующий HDC...

        drawMap(hdc);

        EndPaint(hWnd, &ps);

    }

    break;

    case WM_KEYDOWN:

        switch (wParam)

        {

        case VK_DOWN:

            Down();

            InvalidateRect(hWnd, NULL, TRUE);

            break;

        case VK_LEFT:

            Left();

            InvalidateRect(hWnd, NULL, TRUE);

            break;

        case VK_UP:

            Up();

            InvalidateRect(hWnd, NULL, TRUE);

            break;

        case VK_RIGHT:

            Right();

            InvalidateRect(hWnd, NULL, TRUE);

            break;

        case 0x53: //S
            save();
            break;
        case 0x4c: //L
            load();
            InvalidateRect(hWnd, NULL, TRUE);
            break;
        case 0x57: //W
            add_wall_left();
            InvalidateRect(hWnd, NULL, TRUE);
            break;

        case 0x47: //G
            add_gold_right();
            InvalidateRect(hWnd, NULL, TRUE);
            break;

        case 0x55: //U
            remove_wall_up();
            InvalidateRect(hWnd, NULL, TRUE);
            break;

        case 0x44: //D
            remove_wall_down();
            InvalidateRect(hWnd, NULL, TRUE);
            break;

        case 0x5A: //Z
            remove_walls();
            InvalidateRect(hWnd, NULL, TRUE);
            break;
        }

        break;