#include <stdio.h>
#include <Windows.h>

#define NUM_ELEMENTS 10

int arr[NUM_ELEMENTS];
int n = 0;

void printElements() {
	for (int i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");
}

void keyboardInput() {
	printf("n = ");
	scanf_s("%d", &n);

	printf("input %d values: ", n);
	for (int i = 0; i < n; i++) {
		scanf_s("%d", &arr[i]);
	}
}

void oddsX10() {
	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 1) {
			arr[i] = arr[i] * 10;
		}
	}
}
int findMin() {
	int min = arr[0];
	for (int i = 1; i < n; i++) {
		if (arr[i] < min) {
			min = arr[i];
		}
	}
	return min;
}
int bigger10() {
	int count = 0;
	for (int i = 0; i < n; i++) {
		if (arr[i] > 10) {
			count++;
		}
	}
	return count;
}
int findLastEven() {
	int cnt = 0;
	for (int i = 10; i >= 0; i--) {
		if (arr[i] % 2 == 0) {
			cnt = i;
			break;
		}
	}
	return cnt;
}
int findIndexMin() {
	int maxNum = 10^6;
	int index1 = 0;
	for (int i = 0; i < n; i++) {
		if (arr[i] < maxNum) {
			index1 = i;
			maxNum = arr[i];
		}
	}
	return index1;
}

void seven() {
	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 0) {
			arr[i] *= -1;
		}
	}
	for (int i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
}
void eight() {
	for (int i = 0; i < n; i++) {
		if (arr[i] < 4) {
			arr[i] = 4;
		}
	}
	for (int i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
}

void nine_1() {
	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 0) {
			arr[i] = 0;
		}
	}
	for (int i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
}
void deleteElement(int delIndex) {
	for (int i = delIndex; i < n - 1; i++) {
		arr[i] = arr[i + 1];
	}
	n--;
}
void insertElement(int insIndex, int value) {
	for (int i = n; i > insIndex; i--) {
		arr[i] = arr[i - 1];
	}
	n++;
	arr[insIndex] = value;
}
int findMin1() {
	int findMin1 = arr[0];
	int saveNum = 0;
	for (int i = 0; i < n; i++) {
		if (arr[i] < findMin1) {
			findMin1 = arr[i];
			saveNum = i;

		}

	}
	return saveNum;
}
int last_1() {
	int a = 0;
	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 0) {
			a = i;
			break;
		}
	}
	return a;
}
void main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	int item;
	do {
		printf("\n");
		printf("-----------------------\n");
		printf("Содержимое массива: ");
		printElements();
		printf("Выберите нужную вам операцию: \n");
		printf("1: Ввести с клавиатуры массив\n");
		printf("2: x10 для всех нечетных элементов\n");
		printf("3: Найти минимальный элемент\n");
		printf("4: Элементы больше 10\n");
		printf("5: Последний четный элемент х2\n");
		printf("6: Сколько элементов левее минимального\n");
		printf("7: Четные элементы х(-1)\n");
		printf("8: Элементы меньше 4 заменить на 4\n");
		printf("9: Обнулить четные элементы\n");
		printf("11: Удалить заданный элемент из массива\n");
		printf("12: Вставить элемент\n");
		printf("13: Удалить минимальный элемент из массива\n");
		printf("14: Добавить 0 перед минимальным элементом массива\n");
		printf("\n");
		printf("0: Выйти из программы\n");
		printf("Выбранная операция >>>>>>>>");

		scanf_s("%d", &item);


		switch (item) {
		case 1:
			keyboardInput();
			break;

		case 2:
			oddsX10();
			break;

		case 3:
		{
			int min = findMin();
			printf("min = %d\n", min);
		}
		break;

		case 4:
		{
			int cnt = bigger10();
			printf("Элементов больше 10 -  %d\n", cnt);

		}
		break;
		case 5:
		{
			int index = findLastEven();
			if (index >= 0) {
				arr[index] *= 2;
				printf("%d", arr[index]);
			}

		}
		break;
		case 6:
		{
			int index = findIndexMin();
			printf("Index min = %d\n", index);

			int cnt = 0;
			for (int i = 0; i < index; i++) {
				if (arr[i] % 2 == 0) {
					cnt++;
				}
			}
			printf("Левее минимального %d четных элементов", cnt);
		}
		break;
		case 7:
			seven();
			break;
		case 8:
			eight();
			break;
		case 9:
			nine_1();
			break;
		case 11:
		{
			printf("Delete = ");
			int index;
			scanf_s("%d", &index);

			deleteElement(index);
		}
		break;
		case 12:
		{
			printf("Индекс элемента перед которым нужно вставить новый = ");
			int index;
			scanf_s("%d", &index);

			printf("Значение, которое нужно вставить = ");
			int value;
			scanf_s("%d", &value);

			insertElement(index, value);
		}
		break;
		case 13:
		{
			int min = findMin1();
			deleteElement(min);

		}
		break;
		case 14:
		{
			int min = findMin1();
			insertElement(min, 0);

		}
		break;
		case 15:
		{
			int first = last_1();
			deleteElement(first);
		}
		break;


		}
		} while (item != 0);

	
}